/**
 * Largest product in a series
 * 
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */

/**
 * Let ABCD be the 4 digits of the number K, and let M=A*B*C, N=B*C*D
 * Then N > M iff D > A
 * 
 * Or to get the next product we just divide the current product by A and multiply by D, unless A is 0 in which case we need
 * to recalculate the entire product.
 * So just go along and keep 2 numbers: the current product and the highest product.
 */



// Common includes
#include "common.h"



// Begin the solution
SOLUTION_BEGIN(8, uint64_t)
{
	// The number to search. Let's hope I copied it right
	const char number_str[] = 
		"73167176531330624919225119674426574742355349194934"
		"96983520312774506326239578318016984801869478851843"
		"85861560789112949495459501737958331952853208805511"
		"12540698747158523863050715693290963295227443043557"
		"66896648950445244523161731856403098711121722383113"
		"62229893423380308135336276614282806444486645238749"
		"30358907296290491560440772390713810515859307960866"
		"70172427121883998797908792274921901699720888093776"
		"65727333001053367881220235421809751254540594752243"
		"52584907711670556013604839586446706324415722155397"
		"53697817977846174064955149290862569321978468622482"
		"83972241375657056057490261407972968652414535100474"
		"82166370484403199890008895243450658541227588666881"
		"16427171479924442928230863465674813919123162824586"
		"17866458359124566529476545682848912883142607690042"
		"24219022671055626321111109370544217506941658960408"
		"07198403850962455444362981230987879927244284909188"
		"84580156166097919133875499200524063689912560717606"
		"05886116467109405077541002256983155200055935729725"
		"71636269561882670428252483600823257530420752963450"
	;
	
	// The number of numbers which form the product
	const size_t size = 13;
	
	// Get the length of the number string
	// The -1 is for the '\0'
	const size_t strLength = sizeof(number_str) / sizeof(number_str[0]) - 1;
	
	// Set up the initial state
	result = 0;
	uint64_t currentProduct = 1;
	size_t index = 0;
	ssize_t lastZero = -1;	// Pretend there's a 0 at -1 index
	
	// Go through the string and do the calculations
	while (index < strLength - size)
	{
		// Get the next digit from the string
		uint64_t digit = number_str[index] - '0';
		
		// If the index of the divisor is before the last 0 then just return 1
		uint64_t divisor = (index <= size + lastZero) ? 1 : (number_str[index - size] - '0');
		
		// If the next digit is 0 then we need to keep looping until there are "size" non-0 digits
		if (digit == 0)
		{
			lastZero = index;
			while ((index <= size + lastZero) && (index < strLength - size))
			{
				index++;
				if (number_str[index] == '0')
				{
					lastZero = index;
				}
			}
			
			// Go back to the beginning of the loop using the location of the last 0 as the index
			// and reset the current product back to 1
			index = lastZero + 1;
			currentProduct = 1;
			continue;
		}
		
		// Apply the divide and multiply
		currentProduct /= divisor;
		currentProduct *= digit;
		
		// Set the max product
		if (currentProduct > result)
		{
			result = currentProduct;
		}
		
		// Move to the next digit
		index++;
	}
}
SOLUTION_END()
